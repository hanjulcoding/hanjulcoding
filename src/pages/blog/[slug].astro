---
import dayjs from 'dayjs';
import MarkdownPostLayout from "@/layouts/MarkdownPostLayout.astro";
import { contentfulClient } from "@/lib/contentful";
import type { BlogPost } from "@/lib/contentful";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import { BLOCKS, INLINES } from "@contentful/rich-text-types";


export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<BlogPost>({
    content_type: "pageBlogPost",
  });

  const options = {
    renderNode: {
      // embedded-entry-block 노드를 처리하는 로직
      [BLOCKS.EMBEDDED_ENTRY]: (node: any) => {
        // 여기서 이미지 관련 필드를 직접 처리
        if (node.data.target.sys.contentType.sys.id === 'componentRichImage') {
          const { url, title } = node.data.target.fields.image.fields.file;
          return `<img src="${url}" alt="${title}" />`;
        }
        return '';
      },
      // 다른 필요한 노드 타입도 정의 가능 (예: 링크)
      [INLINES.HYPERLINK]: (node: any) => {
        const { uri } = node.data;
        return `<a href="${uri}">${node.content[0].value}</a>`;
      },
    },
  };

  const pages = entries.items.map((item) => {
    return ({
      params: { slug: item.fields.slug },
      props: {
        title: item.fields.title,
        content: documentToHtmlString(item.fields.content, options),
        publishedDate: dayjs(item.fields.publishedDate).format('YYYY-MM-DD HH:mm:ss'),
        featuredImage: item.fields.featuredImage.fields.file.url,
      },
    });
  });

  return pages;
}
const { content, title, publishedDate } = Astro.props;

---

<MarkdownPostLayout title={title}>
  <time>{publishedDate}</time>
  <h1 class="text-2xl mb-8">{title}</h1>
  <article set:html={content} />
</MarkdownPostLayout>